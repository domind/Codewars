// 4kyu https://www.codewars.com/kata/roman-numerals-helper

class RomanNumerals
{
public:
    string to_roman(int number);
    int from_roman(string roman);
};

string RomanNumerals::to_roman(int number)
{
    string s = "";

    switch (number / 1000)
    {
        case 1:
            s.push_back('M');
            break;
        case 2:
            s = s + "MM";
            break;
        case 3:
            s = s + "MMM";
            break;
    }

    number = number % 1000;
    switch (number / 100)
    {
        case 1:
            s.push_back('C');
            break;
        case 2:
            s = s + "CC";
            break;
        case 3:
            s = s + "CCC";
            break;
        case 4:
            s = s + "CD";
            break;
        case 5:
            s = s + "D";
            break;
        case 6:
            s = s + "DC";
            break;
        case 7:
            s = s + "DCC";
            break;
        case 8:
            s = s + "DCCC";
            break;
        case 9:
            s = s + "CM";
            break;
    }
    number = number % 100;
    switch (number / 10)
    {
        case 1:
            s = s + "X";
            break;
        case 2:
            s = s + "XX";
            break;
        case 3:
            s = s + "XXX";
            break;
        case 4:
            s = s + "XL";
            break;
        case 5:
            s = s + "L";
            break;
        case 6:
            s = s + "LX";
            break;
        case 7:
            s = s + "LXX";
            break;
        case 8:
            s = s + "LXXX";
            break;
        case 9:
            s = s + "XC";
            break;
    }
    switch (number % 10)
    {
        case 1:
            s.push_back('I');
            break;
        case 2:
            s = s + "II";
            break;
        case 3:
            s = s + "III";
            break;
        case 4:
            s = s + "IV";
            break;
        case 5:
            s = s + "V";
            break;
        case 6:
            s = s + "VI";
            break;
        case 7:
            s = s + "VII";
            break;
        case 8:
            s = s + "VIII";
            break;
        case 9:
            s = s + "IX";
            break;
    }
    return s;
}


//---------------------------------------------------------------------------------------

int RomanNumerals::from_roman(string roman)
{

    int sum = 0;
    int i = 0;

    if (roman == "")
        return 0;
    size_t found = roman.find("CM");
    if (found != string::npos)
    {
        sum = sum + 900;
        roman.replace(found, 2, "00");
    }
    found = roman.find("CD");
    if (found != string::npos)
    {
        sum = sum + 400;
        roman.replace(found, 2, "00");
    }
    found = roman.find("XC");
    if (found != string::npos)
    {
        sum = sum + 90;
        roman.replace(found, 2, "00");
    }
    found = roman.find("XL");
    if (found != string::npos)
    {
        sum = sum + 40;
        roman.replace(found, 2, "00");
    }
    found = roman.find("IX");
    if (found != string::npos)
    {
        sum = sum + 9;
        roman.replace(found, 2, "00");
    }
    found = roman.find("IV");
    if (found != string::npos)
    {
        sum = sum + 4;
        roman.replace(found, 2, "00");
    }

    for (i = 0; i < roman.length(); i++)
    {
        if (roman[i] == 'M')
            sum = sum + 1000;
        if (roman[i] == 'D')
            sum = sum + 500;
        if (roman[i] == 'C')
            sum = sum + 100;
        if (roman[i] == 'L')
            sum = sum + 50;
        if (roman[i] == 'X')
            sum = sum + 10;
        if (roman[i] == 'V')
            sum = sum + 5;
        if (roman[i] == 'I')
            sum = sum + 1;
    }


    return sum;
}
RomanNumerals RomanNumerals;
};
