// 4kyu https://www.codewars.com/kata/path-finder-number-2-shortest-path

#include <iostream>
#include <string>
#include <math.h>
#include <queue>
using namespace std;


int path_finder(string maze)
{
    int side = sqrt(maze.length()) + 2;
    int t[side][side];
    if (side == 3)
        return 0;

    //--------------------------------------------
    for (int i = 0; i < side; i++) // fill walls in table t[][]
    {
        t[0][i] = -1;
        t[i][0] = -1;
        t[i][side - 1] = -1;
        t[side - 1][i] = -1;
    }
    //--------------------------------
    int i = 0;
    for (int y = 1; y < side - 1; y++) //  rewrite maze to table t[][]
    {
        for (int x = 1; x < side - 1; x++)
        {
            if (maze[i] == 'W')
                t[x][y] = -1;
            else
                t[x][y] = 0;
            i++;
        }
        i++;
    }
    //---------------------------------------------

    queue<int> Q;
    int x = 1, y = 1;
    int distance = 1;
    Q.push(x);
    Q.push(y);
    t[1][1] = 1;

    while (!Q.empty())
    {
        x = Q.front();
        Q.pop();
        y = Q.front();
        Q.pop();
        distance = t[x][y];

        if ((t[x][y + 1] == 0) || (t[x][y + 1] > distance + 1))
        {
            Q.push(x);
            Q.push(y + 1);
            t[x][y + 1] = distance + 1;
        }
        if ((t[x + 1][y] == 0) || (t[x + 1][y] > distance + 1))
        {
            Q.push(x + 1);
            Q.push(y);
            t[x + 1][y] = distance + 1;
        }
        if ((t[x][y - 1] == 0) || (t[x][y - 1] > distance + 1))
        {
            Q.push(x);
            Q.push(y - 1);
            t[x][y - 1] = distance + 1;
        }
        if ((t[x - 1][y] == 0) || (t[x - 1][y] > distance + 1))
        {
            Q.push(x - 1);
            Q.push(y);
            t[x - 1][y] = distance + 1;
        }
    }

    return t[side - 2][side - 2] - 1;
}
